using Microsoft.AspNetCore.Mvc;
using SportsStore.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

//ПРЕДИСЛОВИЕ:
//Построение меню навигации по категориям
//Нам необходимо предложить пользователям способ выбора категории, который не
//предусматривает ввод URL.Это означает, что мы должны отобразить список доступ­
//ных категорий с отмеченной текущей 1<атегорией, если она есть.По мере построения
//приложения список категорий будет задействован в более чем одном контроллере, по­
//этому он должен быть самодостаточным и многократно используемым.
//В инфраструктуре ASP.NET Core MVC поддерживается концепция компонентов
//представлений, которые идеально подходят для создания единиц вроде много1<ратно
//используемого навигационного элемента управления.Компонент представления -
//это 1шасс С#, который предоставляет небольшой объем многократно используемой 
//приrтадной логики с возможностью выбора и отображения частичных представле­
//ний Razor.Компоненты представлений подробно рассматриваются в главе 22. 
//В данном случае мы создадим компонент представления, который визуализиру­
//ет навигационное меню и интегрирует его в приложение за счет обращения к этому
//компоненту из разделяемой компоновки.Такой подход дает нам обычный класс С#, 
//который может содержать любую необходимую прикладную логику и который можно
//подвергать модульному тестированию подобно любому другому классу. Это удобный
//способ создания небольших сегментов приложения, сохраняя общий подход МVС.

namespace SportsStore.Components
{
    // Создание навигационного компонента представления 
    public class NavigationMenuViewComponent : ViewComponent
    {
        #region Метод Invoke()
        //Метод Invoke() компонента представления вызывается, когда компонент приме­
        //няется в представлении Razor, а результат, возвращаемый методом Invoke(), встав­
        //ляется в НТМL-разметку, отправляемую браузеру.
        #endregion
        //public string Invoke()
        //{
        //    return "Hello from the nav view Component Тестовая запись работы метода Invoke";
        //}

        // Добавление списка категорий в файле 

        #region  private IProductRepository repository
        //Конструктор, определенный в листинге 9.8, принимает аргумент типа
        //IProductRepository. Когда инфраструктуре MVC необходимо создать экземпляр
        //класса компонента представления, она отметит потребность в предоставленИи это­
        //го аргумента и просмотрит конфигурацию в классе Startup, чтобы выяснить, какой
        //объект реализации должен использоваться. Мы имеем дело с тем же самым средством
        //внедрения зависимостей, которое применялось в контроллере из главы 8, и результат
        //будет аналогичным - предоставление компоненту представления доступа к данным
        //без необходимости знать то, какая реализация хранилища будет использоваться.как
        //описано в главе 18. 
        #endregion
        private IProductRepository repository;

        public NavigationMenuViewComponent(IProductRepository repo)
        {
            repository = repo;
        }
        #region IViewComponentResult Invoke()
        //В методе Invoke() с помощью LINQ выбирается и упорядочивается набор катего­
        //рий в хранилище, после чего он передается в качестве аргумента методу View(),к о­
        //торый визуализирует стандартное частичное представление Razor.Детали этого час­
        //тичного пр едставления возвращаются из метода с применением объекта реализации
        //IViewComponentResult
        #endregion
        public IViewComponentResult Invoke()
        {
            #region свойство RoutеData
            //свойство RoutеData используется для доступа к данным запро­
            //са, чтобы получить значение выбранной в текущий момент категории. Значение ка­
            //тегории можно было бы передать представлению путем создания еще одного класса
            //модели представления(и так бы делалось в реальном проекте), но ради разнообразия
            //применим объект ViewBag.

            //Внутри метода Invoke() мы динамически создаем свойство SelectedCategory
            //в объекте ViewBag и устанавливаем его значение равным значению текущей катего­
            //рии, которое получаем через объект контекста, возвращенный свойством RouteData.
            //Как объяснялось в главе 2, ViewBag представляет собой динамический объект, кто­
            //рый позволяет определять новые свойства, просто присваивая им значения.
            #endregion
            ViewBag.SelectedCategory = RouteData?.Values["category"]; // класс RouteData- Information about the current routing path.
            return View(repository.Products.Select(x => x.Category).Distinct().OrderBy(x => x)); //лямбда вернет нам 
            //отсортированный список категорий удалив дубликаты.
        }
    }
} 
