@*частичного представления
        чтобы упростить представление List.cshtml. Мы создадим частичное
        представление, являющееся фрагментом содержимого , которое можно внедрять в
        другое представление подобно шаблону. Частичные представления подробно рас­
        сматриваются в главе 21. Они помогают сократить дублирование , когда одно и то же
        содержимое должно появляться в разных местах приложения. Вместо того чтобы ко­
        пировать и вставлять одинаковую разметку Razor во множество представлений, мож­
        но определить ее единожды в частичном представлении.

        Мы взяли код разметки, который ранее размещался в цикле foreach в представ­
    лении List.cshtml, и перенесли его в новое частичное представление. Обращение
    к частичному представлению производится с помощью вспомогательного метода
    Html.Partial() , которому в аргументах передаются имя представления (ProductSummary) и объект
    модели представления . Подобного рода переход на частичное представление является
    рекомендуемым приемом, поскольку он позволяет вставлять одну и ту же разметку в
    любое представление, которое нуждается в отображении сводки о товаре.*@
@model Products
@*как перечисилитель для продуктов*@
<div class="well">
    <h3>
        <strong>@Model.Name</strong>
        <span class="pull-right label label-primary">@Model.Price.ToString("c")</span>
    </h3>
    @* создаем кнопку AddToCart *@
    <form id=@Model.ProductID asp-action="AddToCart" asp-controller="Cart" method="post">
        <input type="hidden" asp-for="ProductID" />
        <input type="hidden" name="returnUrl" value="@ViewContext.HttpContext.Request.PathAndQuery()" />
        <span class="lead">
            @Model.Description
            <button type="submit" class="btn btn-success btn-sm pull-right">
                Add To Cart
            </button>
        </span>
    </form> 
</div>

@*Мы добавили элемент form, содержащий скрытые элементы input, которые ус­
танавливают значение ProductID из модели представления и URL, куда браузер
должен возвращаться после обновления корзины. Элемент form и один из элементов
input конфигурируются с использованием встроенных дескрипторных вспомогатель­
ных классов, что является удобным способом генерирования форм, которые содержат
значения модели и нацелены на контроллеры и действия в приложении , как описано
в главе 24. Во втором элементе input применяется расширяющий метод, созданный
для установки URL возврата. Кроме того, добавлен элемент button, который будет
отправлять форму приложению.*@ 

